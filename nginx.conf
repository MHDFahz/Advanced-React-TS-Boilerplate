
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # Enable Gzip compressed.
    gzip            on;

    # Enable compression both for HTTP/1.0 and HTTP/1.1.
    gzip_http_version  1.1;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    gzip_disable    "msie6";

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # gzip_types      text/plain text/css text/javascript application/javascript application/x-javascript text/xml application/xml application/xml+rss;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
      application/atom+xml
      text/javascript
      application/javascript
      application/json
      application/rss+xml
      application/vnd.ms-fontobject
      application/x-font-ttf
      application/x-web-app-manifest+json
      application/xhtml+xml
      application/xml
      font/opentype
      image/svg+xml
      image/x-icon
      text/css
      text/plain
      text/x-component;
    # text/html is always compressed by HttpGzipModule

    server {
        listen          8000;
        add_header X-Frame-Options "SAMEORIGIN";
        server_name     localhost;
        root /build;
        index index.html;
        # # take precaution of caching the below group of files as their names
        # # do not change between build updates
        # location /favicon.ico {
        #     # cache it later on when the logo is finalised
        #     root /build;
        # }
        # location /manifest.json {
        #     # not sure if caching is needed here?
        #     root /build;
        # }
        # location /service-worker.js {
        #     # cache it later
        #     root /build;
        # }

        location ~* .map$  {
            root /build;
        }

        # # files beginning with the below pattern can safely be cached,
        # #  as they have hashed names that changes when file changes.
        location ^~ /static/ {
            root /build;
            expires 1y;
            add_header Pragma public;
            add_header Cache-Control "public";
        }

        location / {
            try_files $uri /index.html;
        }

    }


}
